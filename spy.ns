/** @param {NS} ns **/
export async function main(ns) {

  // setup any flags allowed with the script
  let options = {
    "host": [],
    "hostlist": "",
    "traverse": false,
    "showGrowth": false,
    "sleep": 220,
    "debug": false,
    "verbose": false,
    "root": true,
    "help": false,
  };

  // setup any cleanup or exit code
  // ns.atExit();

  // get argument flags through custom function -> i can't get ns.flags to work
  options = await myArgParser(ns, options);

  // print help menu cancel further execution
  if (options.help) {
    ns.tprint("");
    ns.tprint("list of flags:");
    ns.tprint("--host \t\t default:[] \t :provide a hostname for specific execution of host");
    ns.tprint("--hostlist \t default:'' \t :provide a list of hosts");
    ns.tprint("--traverse \t default:false \t :loop through all available hosts");
    ns.tprint("--sleep \t default:220 \t :provides a sense of excution speed, lets you read the log");
    ns.tprint("--debug \t default:false \t :provide debug text");
    ns.tprint("--verbose \t default:false \t :provide more verbose debug text, debug must be enabled");
    ns.tprint("--help \t\t default:false \t :shows you this dialog");
    ns.tprint("");
    ns.tprint("list of functions:");
    ns.tprint("--showGrowth: show the grow time data together with money data. option: --root (also show without root access)");
    ns.exit()
  }

  //// select a function ////
  let myFunctionLoaded = false;

  // getTimings: show host, if it has root access and shows growTime, how much growth it delivers, the current money and max money
  if (!myFunctionLoaded && options.showGrowth) {
    options.myFunction = tools.showGrowth;
    options.debug && ns.tprint("< function loaded >");
    myFunctionLoaded = true;
  }

  if (myFunctionLoaded && options.traverse) {
    options.debug && ns.tprint("< call traverseNetwork >");
    // runs the function that is set in the options
    await traverseNetwork(ns, options);
    ns.exit();
  }

  if (myFunctionLoaded && options.host.length == 1) {
    options.debug && ns.tprint("< run loaded function with given host >");
    // runs the function that is set in the options
    options.myFunction(ns, options.host, options);
    ns.exit();
  }

  if (myFunctionLoaded) {
    options.debug && ns.tprint("< run loaded function host of where code runs>");
    // runs the function that is set in the options with hostname of where the code runs
    options.myFunction(ns, ns.getHostname(), options);
    ns.exit();
  }

  ns.tprint("pick a function, or check --help");
}

function graph(ns, options, data) {
  const myString = ns.tprintf("", ...v)
}

/** @param {NS} ns **/
async function myArgParser(ns, options) {
  options.debug && ns.tprint("< argParser running >");
  await ns.sleep(options.sleep);

  let nextArg = false;

  for (let i = 0; i < ns.args.length; i++) {
    const el = ns.args[i];

    if (!nextArg) {
      // check if flags
      const elPrefix = typeof el == "string" ? el.slice(0, 2) : false;
      const option = typeof el == "string" ? el.slice(2) : false;

      if (elPrefix == "--") {
        options.debug && options.verbose && ns.tprint(el + " is a flag");
        // check if in defined options
        options.debug && options.verbose && ns.tprint(option + ":possible option");
        if (option in options) {
          options.debug && options.verbose && ns.tprint(option + ":option identified");
          if (typeof options[option] == 'boolean') {
            options[option] = !options[option];
            options.debug && options.verbose && ns.tprint(option + ":" + options[option] + " -> option switched");
          } else {
            nextArg = option;
          }
        } else {
          ns.tprint(option + " is an unknown flag");
        }
      } else {
        ns.tprint(el + " is unrecognized input");
      }
    } else {
      // check if next arg is input of previous
      if (nextArg) {
        options.debug && options.verbose && ns.tprint(nextArg + " values -> " + el);
        options[nextArg] = el;
        nextArg = false;
      }
    }
  }
  return options;
}

/** @param {NS} ns **/
async function traverseNetwork(ns, options) {
  options.debug && ns.tprint("< traverseNetwork running >");
  await ns.sleep(options.sleep);

  // get server host of options; defaults to current host
  const host = options.host.length == 1 ? options.host : ns.getHostname();

  /** @param {NS} ns **/
  async function traverse(ns, options, host, previous = []) {
    options.debug && ns.tprint("< traverse running >");
    await ns.sleep(options.sleep);

    let a = ns.scan(host);
    options.debug && options.verbose && ns.tprint("a: " + a);

    let b = a.filter(value => !previous.includes(value));
    options.debug && options.verbose && ns.tprint("b: " + b);

    while (b.length) {
      let host = b.shift();
      options.debug && options.verbose && ns.tprint("host: " + host);

      // runs the function that is set in the options
      if (!previous.includes(host)) {
        previous.push(host);
        options.debug && options.verbose && ns.tprint("previous: " + previous);
        options.myFunction(ns, host, options);
      }

      await traverse(ns, options, host, previous);
    }
  }

  await traverse(ns, options, host);
}

// function
const tools = {
  showGrowth: function (ns, host, options) {
    options.debug && options.verbose && ns.tprint("function loaded: showGrowth");

    const now = Date.now();
    const hasRootAccess = ns.hasRootAccess(host);
    const getGrowTime = ns.getGrowTime(host);
    const getGrowTimeTFormat = ns.tFormat(getGrowTime);
    const getServerGrowth = ns.getServerGrowth(host);
    const getServerMoneyAvailable = ns.getServerMoneyAvailable(host);
    const getServerMaxMoney = ns.getServerMaxMoney(host);
    const serverMoneyPercentOfMax = getServerMoneyAvailable / getServerMaxMoney * 100;
    const serverGrowMoney = getServerMoneyAvailable * (getServerGrowth/100);
    const serverGrowMoneyPercentOfMax = serverGrowMoney / getServerMaxMoney * 100;

    const getServerMinSecurityLevel = ns.getServerMinSecurityLevel(host);
    const getHackTime = ns.getHackTime(host);
    const getServerRequiredHackingLevel = ns.getServerRequiredHackingLevel(host);
    const getServerSecurityLevel = ns.getServerSecurityLevel(host);
    const hackAnalyze = ns.hackAnalyze(host);
    const hackAnalyzeChance = ns.hackAnalyzeChance(host);

    const files = ns.ls(host);





    // ns.tprint("server growth:" + getServerGrowth);

    let data = {
      "host": {"value": host,"format": "%-18s"},
      "root": {"value": hasRootAccess,"format": "%-5s","date": now},
      "timeToGrow": {"value": getGrowTime,"tFormat": getGrowTimeTFormat,"format": "%-30s","date": now},
      "serverPercentGrowth": {"value": getServerGrowth,"format": "%d%%","date": now},
      "serverMoney": {"value": getServerMoneyAvailable,"format": "%10.2fm",
        "k": getServerMoneyAvailable / 1000,
        "m": getServerMoneyAvailable / 1000000,
        "b": getServerMoneyAvailable / 1000000000,
        "date": now
      },
      "serverMoneyPercentOfMax": {"value": serverMoneyPercentOfMax,"format": "%d%%","date": now},
      "serverGrowMoney": {"value": serverGrowMoney,"format": "%10.2fm",
        "k": getServerMoneyAvailable / 1000,
        "m": getServerMoneyAvailable / 1000000,
        "b": getServerMoneyAvailable / 1000000000,
        "date": now
      },
      "serverGrowMoneyPercentOfMax": {"value": serverGrowMoneyPercentOfMax,"format": "%d%%","date": now},
      "serverMaxMoney": {"value": getServerMaxMoney,"format": "%10.2fm",
        "k": getServerMaxMoney / 1000,
        "m": getServerMaxMoney / 1000000,
        "b": getServerMaxMoney / 1000000000,
        "date": now
      }
    };

    const values = [
      data.host.value, 
      data.root.value, 
      data.timeToGrow.tFormat, 
      data.serverPercentGrowth.value, 
      data.serverMoney.m, 
      data.serverMoneyPercentOfMax.value,
      data.serverGrowMoney.m,
      data.serverGrowMoneyPercentOfMax.value,
      data.serverMaxMoney.m
    ];

    let t = data.host.format;
    t += " | ";
    t += data.root.format;
    t += " | ";
    t += data.timeToGrow.format;
    t += " :-> "; 
    t += data.serverPercentGrowth.format;
    t += " | money: ";
    t += data.serverMoney.format;
    t += " {" + data.serverMoneyPercentOfMax.format;
    t += "} | adds: ";
    t += data.serverGrowMoney.format;
    t += " {" + data.serverGrowMoneyPercentOfMax.format;
    t += "} | maxMoney: " + data.serverMaxMoney.format;

     //ns.tprint(t);
    // ns.tprint(values);

    ns.tprintf(t, ...values);
  }
}
